{%- macro parloop_declarations(parloop) -%}
  __local int offset_b;
  __local int offset_b_abs;
  __local int active_threads_count;

  int nbytes;
  int block_id;

  int i_1;
  int i_2;

  {%- if(parloop._unique_indirect_dat_args) %}
    // reduction args
  {%- for arg in parloop._all_inc_non_vec_map_indirect_dat_args %}
    {{ arg.data._cl_type }} {{ arg._local_name() }}[{{ arg.data.cdim if not arg._flatten else 1 }}];
  {%- endfor %}

  {%- for arg in parloop._all_inc_vec_map_args if not arg._flatten %}
  {% for i in range(arg.map.arity) %}
  {{arg.data._cl_type}} {{arg._local_name(idx=i)}}[{{arg.data.cdim}}];
  {%- endfor %}
  {%- endfor %}

  {%- for arg in parloop._all_inc_itspace_dat_args %}
  {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
  {{arg.data._cl_type}} {{arg._local_name(idx=i)}}[{{arg.data.cdim if not arg._flatten or 1}}];
  {%- endfor %}
  {%- endfor %}
  {%- endif %}

  {%- if(parloop._all_global_reduction_args) %}
    // global reduction local declarations
  {% for arg in parloop._all_global_reduction_args %}
    {{ arg.data._cl_type }} {{ arg._reduction_local_name }}[{{ arg.data.cdim }}];
  {%- endfor %}
  {%- endif %}

  {% if(parloop._matrix_args) %}
    // local matrix entry
    {% for arg in parloop._matrix_args %}
    __private {{ arg.data._cl_type }} {{ arg.name }}_entry
    {%- for it in parloop._it_space._extent_ranges -%}[{{ it }}]{%- endfor -%}
    {%- for dim in (arg.data.sparsity.dims if not arg._flatten else (1,1)) %}[{{ dim }}]{% endfor %};
    {% endfor %}
  {% endif %}

  {% for arg in parloop._all_non_inc_vec_map_args %}
    {%- set cdim = arg.data.dataset.cdim if arg._flatten else 1 %}
    {% if arg._is_READ %}
      __global const {{ arg.data._cl_type }}* restrict {{ arg._vec_name }}[{{ arg.map.arity * cdim }}];
    {% else %}
      __global {{ arg.data._cl_type }}* {{ arg._vec_name }}[{{ arg.map.arity * cdim }}];
    {% endif %}
  {%- endfor %}
  {% for arg in parloop._all_inc_vec_map_args %}
    {{ arg.data._cl_type }}* {{ arg._vec_name }}[{{ arg.map.arity }}];
  {%- endfor %}
  {% for arg in parloop._all_non_inc_itspace_dat_args %}
    {%- set cdim = arg.data.dataset.cdim if arg._flatten else 1 %}
    __global {{ arg.data._cl_type }}* {{ arg._vec_name }}[{{ arg.map.arity * cdim }}];
  {%- endfor %}
  {% for arg in parloop._all_inc_itspace_dat_args %}
    {{ arg.data._cl_type }}* {{ arg._vec_name }}[{{ parloop._it_space._extent_ranges[0] }}];
  {%- endfor %}
{%- endmacro -%}
{% macro parloop_prototype(parloop, launch, op2const) %}
__kernel
__attribute__((reqd_work_group_size({{ launch.work_group_size }}, 1, 1)))
void {{ parloop._stub_name }}(
  {%- for arg in parloop._unique_dat_args %}
    {%- if arg._is_READ %}
  __global const {{ arg.data._cl_type }}* restrict {{ arg.name }},
    {%- else %}
  __global {{ arg.data._cl_type }}* {{ arg.name }},
    {%- endif %}
  {%- endfor -%}
  {% for arg in parloop._all_global_non_reduction_args %}
  __global {{ arg.data._cl_type }}* {{ arg.name }},
  {%- endfor -%}
  {% for arg in parloop._all_global_reduction_args %}
  __global {{ arg.data._cl_type }}* {{ arg.name }},
  {%- endfor -%}
  {% for c in op2const %}
  __constant {{ c._cl_type }}* {{ c.name }},
  {% endfor %}
  {% for arg in parloop._matrix_args %}
  __global {{ arg.data._cl_type }}* {{ arg.name }},
  __global int* {{ arg.name }}_rowptr,
  __global int* {{ arg.name }}_colidx,
  {%- endfor -%}
  {% for matem in parloop._matrix_entry_maps %}
  __global int* {{ matem.name }},
  {%- endfor -%}
  int set_size,
  int set_offset,
  {%- if launch.subset %}
  __global int* _ssinds,
  {% endif -%}
  __global const int* restrict p_ind_map,
  __global const int* restrict p_blk_map,
  __global const int* restrict p_offset,
  __global const int* restrict p_nelems,
  __private int block_offset
) {
{% endmacro %}

{%- macro extruded_vec_setup(parloop) -%}
    {% for arg in parloop._unique_dat_args if(arg._is_vec_map or arg._uses_itspace) %}
      {%- if(arg._is_indirect_reduction) -%}
        {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
      {{ arg._vec_name }}[{{ i }}] = {{ arg._local_name(idx=i) }};
        {%- endfor -%}
      {%- else -%}
        {%- if arg._flatten %}
          {%- for j in range(arg.data.dataset.cdim) %}
            {%- for i in range(arg.map.arity) %}
              {{ arg._vec_name }}[{{ j * arg.map.arity + i }}] = {{ arg.name }} + p_ind_map[i_1 + {{ arg._which_indirect + i }}*set_size + offset_b] * {{ arg.data.cdim }} + {{ j }};
            {%- endfor -%}
          {%- endfor -%}
        {%- else %}
          {%- for i in range(arg.map.arity) %}
      {{ arg._vec_name }}[{{ i }}] = {{ arg.name }} + p_ind_map[i_1 + {{ arg._which_indirect + i }}*set_size + offset_b] * {{ arg.data.cdim }};
          {%- endfor -%}
        {%- endif -%}
      {%- endif -%}
    {%- endfor %}
{%- endmacro -%}

{%- macro reduction_setup(parloop) -%}
  {%- for arg in parloop._all_inc_non_vec_map_indirect_dat_args %}
  {{ arg_reduction_setup(arg, arg._which_indirect) | indent(8) }}
  {%- endfor %}
  {%- for arg in parloop._all_inc_vec_map_args %}
    {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
      {{ arg_reduction_setup(arg, arg._which_indirect + i % arg.map.arity) | indent(8) }}
    {%- endfor -%}
  {%- endfor %}
  {%- for arg in parloop._all_inc_itspace_dat_args %}
    {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
      {{ arg_reduction_setup(arg, arg._which_indirect + i % arg.map.arity) | indent(8) }}
    {%- endfor -%}
  {%- endfor %}
{%- endmacro -%}

{%- macro reduction_stage(parloop) -%}
  {%- for arg in parloop._all_inc_non_vec_map_indirect_dat_args %}
  {{ reduction(arg) | indent(8) }}
  {%- endfor %}
  {%- for arg in parloop._all_inc_vec_map_args %}
  {{ reduction_vec_map(arg, parloop) | indent(8) }}
  {%- endfor %}
  {%- for arg in parloop._all_inc_itspace_dat_args %}
  {{ reduction_vec_map(arg, parloop) | indent(8) }}
  {%- endfor %}
  {%- if(parloop._requires_matrix_coloring) %}
  // IterationSpace index loops ({{ parloop._it_space._extent_ranges }})
  {%- for it in parloop._it_space._extent_ranges %}
  for (int idx_{{ loop.index0 }} = 0; idx_{{ loop.index0 }} < {{ it }}; ++idx_{{ loop.index0 }})
  {%- endfor %}
      {{ matrix_insert() }}
  {% endif %}
{%- endmacro -%}

{%- macro arg_reduction_setup(arg, which_indirect) -%}
int {{ arg._ind_offset_name(which_indirect) }} = p_ind_map[i_1 + offset_b + {{ which_indirect }}*set_size];
{%- endmacro -%}

{%- macro reduction(arg) -%}
for (i_2 = 0; i_2 < {{ arg.data.cdim }}; ++i_2) {
  {%- if(arg._is_INC) -%}
  {{ arg.name }}[i_2 + {{ arg._ind_offset_name(arg._which_indirect) }} + layer) * {{ arg.data.cdim }}] += {{ arg._local_name() }}[i_2];
  {%- elif(arg._is_MIN) %}
  {{ arg.name }}[i_2 + {{ arg._ind_offset_name(arg._which_indirect) }} + layer) * {{ arg.data.cdim }}] = min({{ arg.name }}[i_2 + {{ arg._ind_offset_name }} + layer) * {{ arg.data.cdim }}], {{ arg._local_name() }}[i_2]);
  {%- elif(arg._is_MAX) %}
  {{ arg.name }}[i_2 + {{ arg._ind_offset_name(arg._which_indirect) }} + layer) * {{ arg.data.cdim }}] = max({{ arg.name }}[i_2 + {{ arg._ind_offset_name }} + layer) * {{ arg.data.cdim }}], {{ arg._local_name() }}[i_2]);
  {%- endif %}
}
{%- endmacro -%}

{%- macro reduction_vec_map(arg, parloop) -%}
for (i_2 = 0; i_2 < {{ arg.data.cdim if not arg._flatten else 1 }}; ++i_2) {
  {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
    {%- if(arg._flatten) %}
    {%- set offs = i // arg.map.arity %}
    {%- else %}
    {%- set offs = 'i_2' %}
    {%- endif %}
      {%- if(arg._is_INC) %}
    {{ arg.name }}[{{offs}} + ({{ arg._ind_offset_name(arg._which_indirect + i % arg.map.arity) }} + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] += {{ arg._local_name(idx=i) }}[i_2];
      {%- elif(arg._is_MIN) %}
    {{ arg.name }}[{{offs}} + ({{ arg._ind_offset_name(arg._which_indirect + i % arg.map.arity) }} + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = min({{ arg.name }}[({{offs}} + ({{ arg._ind_offset_name(arg._which_indirect + i % arg.map.arity) }} + layer * {{ arg.map.get_offset(i) }})  * {{ arg.data.cdim }}], {{ arg._local_name(idx=i) }}[i_2]);
      {%- elif(arg._is_MAX) %}
    {{ arg.name }}[{{offs}} + ({{ arg._ind_offset_name(arg._which_indirect + i % arg.map.arity) }} + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = max({{ arg.name }}[({{offs}} + ({{ arg._ind_offset_name(arg._which_indirect + i % arg.map.arity) }} + layer * {{ arg.map.get_offset(i) }})  * {{ arg.data.cdim }}], {{ arg._local_name(idx=i) }}[i_2]);
      {%- endif %}
  {%- endfor %}
}
{%- endmacro -%}

{%- macro populate_vec_map(arg) -%}
{%- if not arg._is_indirect_reduction -%}
  {%- if arg._flatten %}
    {%- for j in range(arg.data.dataset.cdim) %}
      {%- for i in range(arg.map.arity) %}
  {{ arg._vec_name }}[{{ j * arg.map.arity + i }}] += (offset * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }};
      {%- endfor -%}
    {%- endfor -%}
  {%- else %}
    {%- for i in range(arg.map.arity) %}
{{ arg._vec_name }}[{{ i }}] += (offset * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }};
    {%- endfor -%}
  {%- endif -%}
{%- endif -%}
{%- endmacro -%}
