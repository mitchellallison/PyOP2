
{%- macro stagingin(arg) -%}
for (i_1 = 0; i_1 < {{ arg._base_layer_size_name }} * {{ arg.data.cdim }}; i_1++) {
  int index = i_1 / {{ arg.data.cdim }};
  int shared_offset = {{ arg._base_layer_offset_name }}[index];
  int layer_count = {{ arg._base_layer_offset_name }}[index + 1] - {{ arg._base_layer_offset_name }}[index];
  for (int layer = get_local_id(0); layer < layer_count; layer += get_local_size(0)) {
    {{ arg._shared_name }}[i_1 % {{ arg.data.cdim }} + (shared_offset + layer) * {{ arg.data.cdim }}] = {{ arg.name }}[i_1 % {{ arg.data.cdim }} + ({{ arg._map_name }}[index] + layer) * {{ arg.data.cdim }}];
  }
  barrier(CLK_LOCAL_MEM_FENCE);
}
{%- endmacro -%}

{%- macro stagingout(arg) -%}
{{ work_group_reduction(arg) }}
{%- endmacro -%}

{%- macro work_group_reduction(arg) -%}
for (i_1 = 0; i_1 < {{ arg._base_layer_size_name}} * {{ arg.data.cdim }}; i_1++) {
  int index = i_1 / {{ arg.data.cdim }};
  int shared_offset = {{ arg._base_layer_offset_name }}[index];
  int layer_count = {{ arg._base_layer_offset_name }}[index + 1] - {{ arg._base_layer_offset_name }}[index];
  for (int layer = get_local_id(0); layer < layer_count; layer += get_local_size(0)) {
  {%- if(arg._is_INC) -%}
    {{arg.name}}[i_1 % {{ arg.data.cdim }} + ({{ arg._map_name }}[index] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] += {{ arg._shared_name }}[i_1 % {{ arg.data.cdim }} + (shared_offset + layer) * {{ arg.data.cdim }}];
  {%- elif(arg._is_MAX) -%}
    {{arg.name}}[i_1 % {{ arg.data.cdim }} + ({{ arg._map_name }}[index] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = max({{arg.name}}[i_1 % {{ arg.data.cdim }} + ({{ arg._map_name }}[index] + layer) * {{ arg.data.cdim }}], {{ arg._shared_name }}[i_1 % {{ arg.data.cdim }} + (shared_offset + layer) * {{ arg.data.cdim }}]);
  {%- elif(arg._is_MIN) -%}
    {{arg.name}}[i_1 % {{ arg.data.cdim }} + ({{ arg._map_name }}[index] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = min({{arg.name}}[i_1 % {{ arg.data.cdim }} + ({{ arg._map_name }}[index] + layer) * {{ arg.data.cdim }}], {{ arg._shared_name }}[i_1 % {{ arg.data.cdim }} + (shared_offset + layer) * {{ arg.data.cdim }}]);
  {%- elif(arg._is_WRITE) -%}
    {{arg.name}}[i_1 % {{ arg.data.cdim }} + ({{ arg._map_name }}[index] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = {{ arg._shared_name }}[i_1 % {{ arg.data.cdim }} + (shared_offset + layer) * {{ arg.data.cdim }}];
  {%- endif %}
  }
}
{%- endmacro -%}

{%- macro color_reduction(arg) -%}
for (i_2 = 0; i_2 < {{ arg.data.cdim }}; ++i_2) {
  {%- if(arg._is_INC) -%}
  {{ arg._shared_name }}[i_2 + (p_loc_map[i_1 + offset_b + {{arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] += {{ arg._local_name() }}[i_2];
  {%- elif(arg._is_MIN) %}
  {{ arg._shared_name }}[i_2 + (p_loc_map[i_1 + offset_b + {(arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = min({{ arg._shared_name }}[i_2 + p_loc_map[i_1 + offset_b + {{arg._which_indirect}}*set_size] * {{ arg.data.cdim }}], {{ arg._local_name() }}[i_2]);
  {%- elif(arg._is_MAX) %}
  {{ arg._shared_name }}[i_2 + (p_loc_map[i_1 + offset_b + {{arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = max({{ arg._shared_name }}[i_2 + p_loc_map[i_1 + offset_b + {{arg._which_indirect}}*set_size] * {{ arg.data.cdim }}], {{ arg._local_name() }}[i_2]);
  {%- endif %}
}
{%- endmacro -%}

{%- macro color_reduction_vec_map(arg, parloop) -%}
for (i_2 = 0; i_2 < {{ arg.data.cdim if not arg._flatten else 1 }}; ++i_2) {
  {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
    {%- if(arg._flatten) %}
    {%- set offs = i // arg.map.arity %}
    {%- else %}
    {%- set offs = 'i_2' %}
    {%- endif %}
      {%- if(arg._is_INC) %}
    {{ arg._shared_name }}[{{offs}} + (p_loc_map[i_1 + offset_b + {{arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] += {{ arg._local_name(idx=i) }}[i_2];
      {%- elif(arg._is_MIN) %}
    {{ arg._shared_name }}[{{offs}} + (p_loc_map[i_1 + offset_b + {(arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = min({{ arg._shared_name }}[{{offs}} + (p_loc_map[i_1 + offset_b + {{arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}], {{ arg._local_name(idx=i) }}[i_2]);
      {%- elif(arg._is_MAX) %}
    {{ arg._shared_name }}[{{offs}} + (p_loc_map[i_1 + offset_b + {{arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}] = max({{ arg._shared_name }}[{{offs}} + (p_loc_map[i_1 + offset_b + {{arg._which_indirect + i % arg.map.arity}}*set_size] + layer * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }}], {{ arg._local_name(idx=i) }}[i_2]);
      {%- endif %}
  {%- endfor %}
}
{%- endmacro -%}

{%- macro reduction_stage(parloop) -%}
  {%- for arg in parloop._all_inc_non_vec_map_indirect_dat_args %}
  {{ color_reduction(arg) | indent(8) }}
  {%- endfor %}
  {%- for arg in parloop._all_inc_vec_map_args %}
  {{ color_reduction_vec_map(arg) | indent(8) }}
  {%- endfor %}
  {%- for arg in parloop._all_inc_itspace_dat_args %}
  {{ color_reduction_vec_map(arg) | indent(8) }}
  {%- endfor %}
  {%- if(parloop._requires_matrix_coloring) %}
  // IterationSpace index loops ({{ parloop._it_space._extent_ranges }})
  {%- for it in parloop._it_space._extent_ranges %}
  for (int idx_{{ loop.index0 }} = 0; idx_{{ loop.index0 }} < {{ it }}; ++idx_{{ loop.index0 }})
  {%- endfor %}
      {{ matrix_insert() }}
  {% endif %}
{%- endmacro -%}

{%- macro populate_vec_map(arg, parloop) -%}
// populate vec map
{%- if(arg._is_indirect_reduction) -%}
  {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
{{ arg._vec_name }}[{{ i }}] = {{ arg._local_name(idx=i) }};
  {%- endfor -%}
{%- else -%}
  {%- if arg._flatten %}
    {%- for j in range(arg.data.dataset.cdim) %}
      {%- for i in range(arg.map.arity) %}
  {{ arg._vec_name }}[{{ j * arg.map.arity + i }}] += (offset * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }};
      {%- endfor -%}
    {%- endfor -%}
  {%- else %}
    {%- for i in range(arg.map.arity) %}
{{ arg._vec_name }}[{{ i }}] += (offset * {{ arg.map.get_offset(i) }}) * {{ arg.data.cdim }};
    {%- endfor -%}
  {%- endif -%}
{%- endif -%}
{%- endmacro -%}

{%- macro extruded_vec_setup(parloop) -%}
  {% for arg in parloop._unique_dat_args if(arg._is_vec_map or arg._uses_itspace) %}
    {%- if(arg._is_indirect_reduction) -%}
      {%- for i in range(parloop._it_space._extent_ranges[0] if arg._flatten else arg.map.arity) %}
    {{ arg._vec_name }}[{{ i }}] = {{ arg._local_name(idx=i) }};
      {%- endfor -%}
    {%- else -%}
      {%- if arg._flatten %}
        {%- for j in range(arg.data.dataset.cdim) %}
          {%- for i in range(arg.map.arity) %}
            {{ arg._vec_name }}[{{ j * arg.map.arity + i }}] = {{ arg._shared_name }} + p_loc_map[i_1 + {{arg._which_indirect + i}}*set_size + offset_b] * {{ arg.data.cdim }} + {{ j }};
          {%- endfor -%}
        {%- endfor -%}
      {%- else %}
        {%- for i in range(arg.map.arity) %}
    {{ arg._vec_name }}[{{ i }}] = {{ arg._shared_name }} + p_loc_map[i_1 + {{arg._which_indirect + i}}*set_size + offset_b] * {{ arg.data.cdim }};
        {%- endfor -%}
      {%- endif -%}
    {%- endif -%}
  {%- endfor %}
{%- endmacro -%}
  
